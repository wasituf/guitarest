---
import Layout from '../layouts/Layout.astro'

import HelpIndicator from '../components/HelpIndicator.astro'
---

<Layout title="Tuner | Guitarest">
  <main class="flex h-full w-full items-center justify-center">
    <HelpIndicator
      message={`<span class="font-bold">Pick</span> a string on your <span class="font-bold">Guitar</span> to start tuning.`}
    />
    <p id="note" class="z-10 -translate-y-3 text-5xl"></p>
    <p id="offset" class="absolute translate-y-7"></p>
    <div
      id="indicator"
      class="absolute h-[200px] max-h-[600px] min-h-24 w-[200px] min-w-24 max-w-[600px] rounded-full border-4 border-green-500 transition-size duration-300"
    >
    </div>
  </main>
</Layout>

<script>
  // @ts-ignore
  import * as ml5 from 'ml5'
  import { guitarStringRanges } from '../constants'

  let pitch: any

  const tone = new Audio('/audio/ding.wav')

  const noteUI = document.getElementById('note')
  const indicatorUI = document.getElementById('indicator')
  const offsetUI = document.getElementById('offset')

  const smoothingFactor = 0.65 // Adjust this value to control the amount of smoothing
  let smoothedFrequency = 0

  async function setup() {
    startPitch(
      await navigator.mediaDevices.getUserMedia({ audio: true, video: false }),
      new AudioContext(),
    )
  }
  setup()

  function startPitch(stream: MediaStream, audioContext: AudioContext) {
    pitch = ml5.pitchDetection('/model', audioContext, stream, modelLoaded)
  }

  function modelLoaded() {
    console.log('Model Loaded')
    getPitch()
  }

  function getPitch() {
    pitch.getPitch(function (err: string, frequency: number) {
      let delay = 10

      if (frequency) {
        delay = 10

        updateSmoothedFrequency(frequency)

        const readings = detectStringAndOffset(
          smoothedFrequency,
          guitarStringRanges,
        )

        if (readings.name !== 'Unknown' && offsetUI && indicatorUI && noteUI) {
          noteUI.innerText = readings.name

          const offset = Math.abs((400 / 20) * readings.offset)
          indicatorUI.style.width = `${200 + offset}px`
          indicatorUI.style.height = `${200 + offset}px`

          offsetUI.innerText = (readings.offset * 5).toFixed(0).toString()
          if (readings.offset < 0) {
            offsetUI.style.color = '#FF4B4B'
            offsetUI.innerText = 'Too Low'
          } else if (readings.offset > 0) {
            offsetUI.style.color = '#FF4B4B'
            offsetUI.innerText = 'Too High'
          } else {
            offsetUI.style.color = '#00FF00'
            offsetUI.innerText = 'In Tune'
          }

          if (readings.inTune) {
            tone.play()
            indicatorUI.classList.remove('border-red-500')
            indicatorUI.classList.add('border-green-500')
            delay = 1000
          } else {
            indicatorUI.classList.remove('border-green-500')
            indicatorUI.classList.add('border-red-500')
          }
        }
      } else {
        if (err) {
        }
      }
      setTimeout(getPitch, delay)
    })
  }

  // Function to update smoothed frequency
  function updateSmoothedFrequency(newFrequency: number) {
    // Apply smoothing
    smoothedFrequency =
      smoothedFrequency * smoothingFactor + newFrequency * (1 - smoothingFactor)
  }

  function detectStringAndOffset(
    detectedFrequency: number,
    stringRanges: {
      name: string
      min: number
      max: number
      perfectMin: number
      perfectMax: number
    }[],
  ) {
    for (let i = 0; i < stringRanges.length; i++) {
      const { name, min, max, perfectMin, perfectMax } = stringRanges[i]
      if (detectedFrequency >= min && detectedFrequency <= max) {
        let offset = 0
        let inTune = false

        if (
          detectedFrequency >= perfectMin &&
          detectedFrequency <= perfectMax
        ) {
          inTune = true
        } else {
          offset =
            detectedFrequency < perfectMin
              ? detectedFrequency - perfectMin
              : detectedFrequency - perfectMax
        }

        return { name, offset, inTune }
      }
    }
    return { name: 'Unknown', offset: 0, inTune: false }
  }
</script>
